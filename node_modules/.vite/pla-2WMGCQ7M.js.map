{
  "version": 3,
  "sources": ["../monaco-editor/esm/vs/basic-languages/pla/pla.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    comments: {\n        lineComment: '#'\n    },\n    brackets: [\n        ['[', ']'],\n        ['<', '>'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '[', close: ']' },\n        { open: '<', close: '>' },\n        { open: '(', close: ')' }\n    ],\n    surroundingPairs: [\n        { open: '[', close: ']' },\n        { open: '<', close: '>' },\n        { open: '(', close: ')' }\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.pla',\n    brackets: [\n        { open: '[', close: ']', token: 'delimiter.square' },\n        { open: '<', close: '>', token: 'delimiter.angle' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\n    ],\n    keywords: [\n        '.i',\n        '.o',\n        '.mv',\n        '.ilb',\n        '.ob',\n        '.label',\n        '.type',\n        '.phase',\n        '.pair',\n        '.symbolic',\n        '.symbolic-output',\n        '.kiss',\n        '.p',\n        '.e',\n        '.end'\n    ],\n    // regular expressions\n    comment: /#.*$/,\n    identifier: /[a-zA-Z]+[a-zA-Z0-9_\\-]*/,\n    plaContent: /[01\\-~\\|]+/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // comments and whitespace\n            { include: '@whitespace' },\n            [/@comment/, 'comment'],\n            // keyword\n            [\n                /\\.([a-zA-Z_\\-]+)/,\n                {\n                    cases: {\n                        '@eos': { token: 'keyword.$1' },\n                        '@keywords': {\n                            cases: {\n                                '.type': { token: 'keyword.$1', next: '@type' },\n                                '@default': { token: 'keyword.$1', next: '@keywordArg' }\n                            }\n                        },\n                        '@default': { token: 'keyword.$1' }\n                    }\n                }\n            ],\n            // identifiers\n            [/@identifier/, 'identifier'],\n            // PLA row\n            [/@plaContent/, 'string']\n        ],\n        whitespace: [[/[ \\t\\r\\n]+/, '']],\n        type: [{ include: '@whitespace' }, [/\\w+/, { token: 'type', next: '@pop' }]],\n        keywordArg: [\n            // whitespace\n            [\n                /[ \\t\\r\\n]+/,\n                {\n                    cases: {\n                        '@eos': { token: '', next: '@pop' },\n                        '@default': ''\n                    }\n                }\n            ],\n            // comments\n            [/@comment/, 'comment', '@pop'],\n            // brackets\n            [\n                /[<>()\\[\\]]/,\n                {\n                    cases: {\n                        '@eos': { token: '@brackets', next: '@pop' },\n                        '@default': '@brackets'\n                    }\n                }\n            ],\n            // numbers\n            [\n                /\\-?\\d+/,\n                {\n                    cases: {\n                        '@eos': { token: 'number', next: '@pop' },\n                        '@default': 'number'\n                    }\n                }\n            ],\n            // identifiers\n            [\n                /@identifier/,\n                {\n                    cases: {\n                        '@eos': { token: 'identifier', next: '@pop' },\n                        '@default': 'identifier'\n                    }\n                }\n            ],\n            // delimiter\n            [\n                /[;=]/,\n                {\n                    cases: {\n                        '@eos': { token: 'delimiter', next: '@pop' },\n                        '@default': 'delimiter'\n                    }\n                }\n            ]\n        ]\n    }\n};\n"],
  "mappings": ";;;AAIO,IAAI,OAAO;AAAA,EACd,UAAU;AAAA,IACN,aAAa;AAAA;AAAA,EAEjB,UAAU;AAAA,IACN,CAAC,KAAK;AAAA,IACN,CAAC,KAAK;AAAA,IACN,CAAC,KAAK;AAAA;AAAA,EAEV,kBAAkB;AAAA,IACd,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA;AAAA,EAExB,kBAAkB;AAAA,IACd,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA;AAAA;AAGrB,IAAI,WAAW;AAAA,EAClB,cAAc;AAAA,EACd,cAAc;AAAA,EACd,UAAU;AAAA,IACN,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO;AAAA,IAChC,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO;AAAA,IAChC,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO;AAAA;AAAA,EAEpC,UAAU;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,EAGJ,SAAS;AAAA,EACT,YAAY;AAAA,EACZ,YAAY;AAAA,EAEZ,WAAW;AAAA,IACP,MAAM;AAAA,MAEF,EAAE,SAAS;AAAA,MACX,CAAC,YAAY;AAAA,MAEb;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,YACH,QAAQ,EAAE,OAAO;AAAA,YACjB,aAAa;AAAA,cACT,OAAO;AAAA,gBACH,SAAS,EAAE,OAAO,cAAc,MAAM;AAAA,gBACtC,YAAY,EAAE,OAAO,cAAc,MAAM;AAAA;AAAA;AAAA,YAGjD,YAAY,EAAE,OAAO;AAAA;AAAA;AAAA;AAAA,MAKjC,CAAC,eAAe;AAAA,MAEhB,CAAC,eAAe;AAAA;AAAA,IAEpB,YAAY,CAAC,CAAC,cAAc;AAAA,IAC5B,MAAM,CAAC,EAAE,SAAS,iBAAiB,CAAC,OAAO,EAAE,OAAO,QAAQ,MAAM;AAAA,IAClE,YAAY;AAAA,MAER;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,YACH,QAAQ,EAAE,OAAO,IAAI,MAAM;AAAA,YAC3B,YAAY;AAAA;AAAA;AAAA;AAAA,MAKxB,CAAC,YAAY,WAAW;AAAA,MAExB;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,YACH,QAAQ,EAAE,OAAO,aAAa,MAAM;AAAA,YACpC,YAAY;AAAA;AAAA;AAAA;AAAA,MAKxB;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,YACH,QAAQ,EAAE,OAAO,UAAU,MAAM;AAAA,YACjC,YAAY;AAAA;AAAA;AAAA;AAAA,MAKxB;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,YACH,QAAQ,EAAE,OAAO,cAAc,MAAM;AAAA,YACrC,YAAY;AAAA;AAAA;AAAA;AAAA,MAKxB;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,YACH,QAAQ,EAAE,OAAO,aAAa,MAAM;AAAA,YACpC,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
